#include <iostream>
#include <numeric>
#include <random>
//
#include <doctest/doctest.h>
//
#include <lyrahgames/cipher/cipher.hpp>

using namespace std;
using namespace lyrahgames;

SCENARIO("") {
  mt19937 rng{random_device{}()};
  uniform_int_distribution<int> dist{1, 100'000};
  const auto random = [&] { return dist(rng); };

  const size_t n = 1'000'000;

  for (size_t i = 0; i < n; ++i) {
    const auto p = random();
    const auto q = random();
    const auto [d, a, b] = cipher::egcd(p, q);

    CHECK(d == gcd(p, q));
    CHECK(a * p + b * q == d);
  }
}

SCENARIO("") {
  mt19937 rng{random_device{}()};
  const size_t n = 1'000'000;
  for (size_t i = 0; i < n; ++i) {
    auto x = rng();
    auto y = rng();
    while (!y)  // y should not be zero
      y = rng();

    const auto [q, r] = cipher::f2_polynom_divmod(x, y);
    const auto t = cipher::f2_polynom_mul(q, y) ^ r;
    CHECK(x == t);
  }

  // modulo of high monomials for F(2^8)
  for (const auto [x, a, b] :
       {
           tuple                                     //
           {256u << 0, 0b0000'0001u, 0b0001'1011u},  // x^8
           {256u << 1, 0b0000'0010u, 0b0011'0110u},  // x^9
           {256u << 2, 0b0000'0100u, 0b0110'1100u},  // x^10
           {256u << 3, 0b0000'1000u, 0b1101'1000u},  // x^11
           {256u << 4, 0b0001'0001u, 0b1010'1011u},  // x^12
           {256u << 5, 0b0010'0011u, 0b0100'1101u},  // x^13
           {256u << 6, 0b0100'0110u, 0b1001'1010u},  // x^14
           {256u << 7, 0b1000'1101u, 0b0010'1111u},  // x^15
       })

  {
    // irreducible F(2) polynom in F(2^8):
    // x^8 + x^4 + x^3 + x + 1
    const auto [q, r] = cipher::f2_polynom_divmod(x, 0b1'0001'1011u);
    CHECK(q == a);
    CHECK(r == b);
  }

  {
    const auto [q, r] = cipher::f2_polynom_divmod(0b10110000u, 0b00011011u);
    CHECK(q == 0b00001100u);
    CHECK(r == 0b00000100u);
  }

  // multiplicative inverse for F(2^8)
  // x^8 + x^4 + x^3 + x + 1
  // == 0b1'0001'1011 == 0x11b
  for (uint16_t x = 0; const auto x_1 : array<uint16_t, 256>{
                           0x00, 0x01, 0x8d, 0xf6, 0xcb, 0x52, 0x7b, 0xd1,
                           0xe8, 0x4f, 0x29, 0xc0, 0xb0, 0xe1, 0xe5, 0xc7,

                           0x74, 0xb4, 0xaa, 0x4b, 0x99, 0x2b, 0x60, 0x5f,
                           0x58, 0x3f, 0xfd, 0xcc, 0xff, 0x40, 0xee, 0xb2,

                           0x3a, 0x6e, 0x5a, 0xf1, 0x55, 0x4d, 0xa8, 0xc9,
                           0xc1, 0x0a, 0x98, 0x15, 0x30, 0x44, 0xa2, 0xc2,

                           0x2c, 0x45, 0x92, 0x6c, 0xf3, 0x39, 0x66, 0x42,
                           0xf2, 0x35, 0x20, 0x6f, 0x77, 0xbb, 0x59, 0x19,

                           0x1d, 0xfe, 0x37, 0x67, 0x2d, 0x31, 0xf5, 0x69,
                           0xa7, 0x64, 0xab, 0x13, 0x54, 0x25, 0xe9, 0x09,

                           0xed, 0x5c, 0x05, 0xca, 0x4c, 0x24, 0x87, 0xbf,
                           0x18, 0x3e, 0x22, 0xf0, 0x51, 0xec, 0x61, 0x17,

                           0x16, 0x5e, 0xaf, 0xd3, 0x49, 0xa6, 0x36, 0x43,
                           0xf4, 0x47, 0x91, 0xdf, 0x33, 0x93, 0x21, 0x3b,

                           0x79, 0xb7, 0x97, 0x85, 0x10, 0xb5, 0xba, 0x3c,
                           0xb6, 0x70, 0xd0, 0x06, 0xa1, 0xfa, 0x81, 0x82,

                           0x83, 0x7e, 0x7f, 0x80, 0x96, 0x73, 0xbe, 0x56,
                           0x9b, 0x9e, 0x95, 0xd9, 0xf7, 0x02, 0xb9, 0xa4,

                           0xde, 0x6a, 0x32, 0x6d, 0xd8, 0x8a, 0x84, 0x72,
                           0x2a, 0x14, 0x9f, 0x88, 0xf9, 0xdc, 0x89, 0x9a,

                           0xfb, 0x7c, 0x2e, 0xc3, 0x8f, 0xb8, 0x65, 0x48,
                           0x26, 0xc8, 0x12, 0x4a, 0xce, 0xe7, 0xd2, 0x62,

                           0x0c, 0xe0, 0x1f, 0xef, 0x11, 0x75, 0x78, 0x71,
                           0xa5, 0x8e, 0x76, 0x3d, 0xbd, 0xbc, 0x86, 0x57,

                           0x0b, 0x28, 0x2f, 0xa3, 0xda, 0xd4, 0xe4, 0x0f,
                           0xa9, 0x27, 0x53, 0x04, 0x1b, 0xfc, 0xac, 0xe6,

                           0x7a, 0x07, 0xae, 0x63, 0xc5, 0xdb, 0xe2, 0xea,
                           0x94, 0x8b, 0xc4, 0xd5, 0x9d, 0xf8, 0x90, 0x6b,

                           0xb1, 0x0d, 0xd6, 0xeb, 0xc6, 0x0e, 0xcf, 0xad,
                           0x08, 0x4e, 0xd7, 0xe3, 0x5d, 0x50, 0x1e, 0xb3,

                           0x5b, 0x23, 0x38, 0x34, 0x68, 0x46, 0x03, 0x8c,
                           0xdd, 0x9c, 0x7d, 0xa0, 0xcd, 0x1a, 0x41, 0x1c}) {
    const uint16_t p = 0b1'0001'1011u;
    CAPTURE(x);
    CHECK(x_1 == cipher::f2_polynom_inv(x, p));
    CHECK(x == cipher::f2_polynom_inv(x_1, p));
    ++x;
  }

  // AES S-Box
  for (uint8_t i = 0; const auto x : array<uint8_t, 256>{
                          0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,  //
                          0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,  //
                          0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,  //
                          0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,  //
                          0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,  //
                          0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,  //
                          0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,  //
                          0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,  //
                          0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,  //
                          0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,  //
                          0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,  //
                          0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,  //
                          0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,  //
                          0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,  //
                          0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,  //
                          0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,  //
                          0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,  //
                          0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,  //
                          0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,  //
                          0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,  //
                          0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,  //
                          0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,  //
                          0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,  //
                          0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,  //
                          0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,  //
                          0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,  //
                          0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,  //
                          0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,  //
                          0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,  //
                          0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,  //
                          0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,  //
                          0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,  //
                      }) {
    CAPTURE(i);
    CHECK(cipher::aes_s_box(i) == x);
    ++i;
  }

  // AES Inverse S-Box
  for (uint8_t i = 0; const auto x : array<uint8_t, 256>{
                          0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,  //
                          0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
                          0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,  //
                          0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
                          0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d,  //
                          0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
                          0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2,  //
                          0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
                          0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,  //
                          0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
                          0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,  //
                          0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
                          0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a,  //
                          0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
                          0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,  //
                          0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
                          0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea,  //
                          0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
                          0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85,  //
                          0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
                          0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,  //
                          0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
                          0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20,  //
                          0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
                          0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31,  //
                          0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
                          0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,  //
                          0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
                          0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0,  //
                          0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
                          0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26,  //
                          0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
                      }) {
    CAPTURE(i);
    CHECK(cipher::aes_inv_s_box(i) == x);
    ++i;
  }

  using cipher::galois8;
  for (int i = 0; i < 256; ++i) {
    for (int j = 0; j < 256; ++j) {
      const auto k = cipher::f2_polynom_mul(uint16_t(i), uint16_t(j));
      const auto [q, r] = cipher::f2_polynom_divmod(k, uint16_t(0b1'0001'1011));
      CHECK(galois8(i) * galois8(j) == galois8(r));
    }
  }
  for (int i = 0; i < 256; ++i) {
    for (int j = 1; j < 256; ++j) {
      const auto t = galois8(i) / galois8(j);
      CHECK(t * galois8(j) == galois8(i));
    }
  }
}
