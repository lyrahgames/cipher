#include <doctest/doctest.h>
//
#include <chrono>
#include <iomanip>
#include <iostream>
#include <random>
//
#include <lyrahgames/cipher/aes/aes.hpp>

using namespace std;
using namespace lyrahgames::cipher;

SCENARIO("AES-128: S-Box Bijectivity") {
  for (size_t i = 0; i < 256; ++i) {
    CHECK(aes128::inv_s_box(aes128::s_box(i)) == i);
    CHECK(aes128::s_box(aes128::inv_s_box(i)) == i);
  }
}

// SCENARIO("") {
//   // mt19937 rng{random_device{}()};
//   random_device rng{};
//   using clock = chrono::high_resolution_clock;
//   uint32_t block[4]{rng(), rng(), rng(), rng()};

//   MESSAGE(hex << setw(8) << block[0] << block[1] << block[2] << block[3]);

//   const auto start = clock::now();
//   for (size_t i = 0; i < 1'000'000'000; ++i)
//   aes128::sub_bytes((uint8_t*)block); const auto end = clock::now(); const
//   auto time = chrono::duration<float>(end - start).count();

//   MESSAGE(hex << setw(8) << block[0] << block[1] << block[2] << block[3]);
//   MESSAGE("time = " << time << " s");
// }

SCENARIO("") {
  mt19937 rng{random_device{}()};
  // random_device rng{};
  using clock = chrono::high_resolution_clock;
  uint64_t block1[2]{(rng() << 32) | rng(), (rng() << 32) | rng()};
  uint64_t block2[2]{(rng() << 32) | rng(), (rng() << 32) | rng()};

  MESSAGE(hex << setfill('0') << setw(16) << block1[0] << block1[1]);

  const auto start = clock::now();
  for (size_t i = 0; i < 100'000'000; ++i) {
    // aes128::mix_columns((uint8_t*)block1, (uint8_t*)block2);
    // aes128::mix_columns((uint8_t*)block2, (uint8_t*)block1);
    aes128::mix_columns((const uint64_t*)block1, (uint64_t*)block2);
    aes128::mix_columns((const uint64_t*)block2, (uint64_t*)block1);
  }
  const auto end = clock::now();
  const auto time = chrono::duration<float>(end - start).count();

  MESSAGE(hex << setw(16) << block1[0] << block1[1]);
  MESSAGE("time = " << time << " s");
}

SCENARIO("AES-128: ShiftRows Bijectivity") {
  for (size_t i = 0; i < 16; ++i) {
    CHECK(aes128::inv_shift_rows_index(aes128::shift_rows_index(i)) == i);
    CHECK(aes128::shift_rows_index(aes128::inv_shift_rows_index(i)) == i);
  }
}

SCENARIO("AES-128: MixColumns Bijectivity") {
  mt19937 rng{random_device{}()};
  uint8_t src[16], mix[16], inv[16];
  constexpr size_t n = 1'000'000;
  for (size_t i = 0; i < n; ++i) {
    for (size_t j = 0; j < 16; ++j) src[j] = rng();
    aes128::mix_columns(src, mix);
    aes128::inv_mix_columns(mix, inv);
    for (size_t j = 0; j < 16; ++j) CHECK(inv[j] == src[j]);
  }
}

SCENARIO("") {
  uint8_t round_keys[] = {
      0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,  //
      0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,  //

      0xa0, 0xfa, 0xfe, 0x17, 0x88, 0x54, 0x2c, 0xb1,  //
      0x23, 0xa3, 0x39, 0x39, 0x2a, 0x6c, 0x76, 0x05,  //

      0xf2, 0xc2, 0x95, 0xf2, 0x7a, 0x96, 0xb9, 0x43,  //
      0x59, 0x35, 0x80, 0x7a, 0x73, 0x59, 0xf6, 0x7f,  //

      0x3d, 0x80, 0x47, 0x7d, 0x47, 0x16, 0xfe, 0x3e,  //
      0x1e, 0x23, 0x7e, 0x44, 0x6d, 0x7a, 0x88, 0x3b,  //

      0xef, 0x44, 0xa5, 0x41, 0xa8, 0x52, 0x5b, 0x7f,  //
      0xb6, 0x71, 0x25, 0x3b, 0xdb, 0x0b, 0xad, 0x00,  //

      0xd4, 0xd1, 0xc6, 0xf8, 0x7c, 0x83, 0x9d, 0x87,  //
      0xca, 0xf2, 0xb8, 0xbc, 0x11, 0xf9, 0x15, 0xbc,  //

      0x6d, 0x88, 0xa3, 0x7a, 0x11, 0x0b, 0x3e, 0xfd,  //
      0xdb, 0xf9, 0x86, 0x41, 0xca, 0x00, 0x93, 0xfd,  //

      0x4e, 0x54, 0xf7, 0x0e, 0x5f, 0x5f, 0xc9, 0xf3,  //
      0x84, 0xa6, 0x4f, 0xb2, 0x4e, 0xa6, 0xdc, 0x4f,  //

      0xea, 0xd2, 0x73, 0x21, 0xb5, 0x8d, 0xba, 0xd2,  //
      0x31, 0x2b, 0xf5, 0x60, 0x7f, 0x8d, 0x29, 0x2f,  //

      0xac, 0x77, 0x66, 0xf3, 0x19, 0xfa, 0xdc, 0x21,  //
      0x28, 0xd1, 0x29, 0x41, 0x57, 0x5c, 0x00, 0x6e,  //

      0xd0, 0x14, 0xf9, 0xa8, 0xc9, 0xee, 0x25, 0x89,  //
      0xe1, 0x3f, 0x0c, 0xc8, 0xb6, 0x63, 0x0c, 0xa6,  //
  };

  uint8_t keys[11 * 16];
  aes128::expand(round_keys, keys);
  for (int i = 0; i < 11 * 16; ++i) {
    CAPTURE(i);
    REQUIRE(round_keys[i] == keys[i]);
  }

  for (auto& [plain, crypt] : {
           pair<array<uint8_t, 16>, array<uint8_t, 16>>       //
           {{0x5c, 0xf6, 0xee, 0x79, 0x2c, 0xdf, 0x05, 0xe1,  //
             0xba, 0x2b, 0x63, 0x25, 0xc4, 0x1a, 0x5f, 0x10},
            {0xe2, 0x48, 0x89, 0xba, 0xaa, 0xdd, 0x90, 0x6b,  //
             0x06, 0x30, 0x06, 0x59, 0x8b, 0x8c, 0xe4, 0x59}},

           {{0xe7, 0xe4, 0x59, 0xfa, 0xa1, 0x11, 0xb3, 0x37,  //
             0xaa, 0x52, 0x18, 0x59, 0x5c, 0x3b, 0xdc, 0x8d},
            {0x02, 0x0b, 0x3c, 0x68, 0x63, 0x35, 0xf1, 0xe4,  //
             0xfb, 0xcf, 0xdc, 0x9d, 0x34, 0xaa, 0xef, 0xe5}},

           {{0x31, 0x7a, 0xae, 0x07, 0x69, 0xad, 0xab, 0x88,  //
             0x4c, 0xba, 0x8f, 0x80, 0xc5, 0x4c, 0x6d, 0x26},
            {0x38, 0x37, 0x7a, 0x70, 0x42, 0x79, 0x10, 0x88,  //
             0x0d, 0x7f, 0x5c, 0xdd, 0x56, 0x58, 0x9a, 0xdd}},

           {{0x5b, 0x46, 0xc2, 0xcd, 0xfc, 0xee, 0x6e, 0x32,  //
             0x34, 0x8b, 0x12, 0xbe, 0xa7, 0x59, 0x82, 0x30},
            {0x41, 0x81, 0x29, 0x76, 0x8f, 0x10, 0x86, 0x11,  //
             0x74, 0xac, 0xfd, 0xdc, 0x2c, 0xb3, 0x32, 0x18}},

           {{0xb0, 0xc2, 0x64, 0x64, 0xc9, 0xd9, 0xc9, 0x9a,  //
             0xe1, 0x47, 0x73, 0xee, 0x81, 0x48, 0x54, 0x28},
            {0x16, 0xe6, 0xeb, 0x08, 0xa1, 0x57, 0x16, 0x91,  //
             0xf2, 0x09, 0x15, 0xa5, 0x12, 0x85, 0xe0, 0x54}},

           {{0xe6, 0x03, 0xab, 0x0c, 0x92, 0x09, 0x8e, 0xbf,  //
             0x08, 0xf9, 0x0b, 0xfc, 0xea, 0x33, 0xff, 0x98},
            {0x96, 0xef, 0xd8, 0x2c, 0x21, 0x14, 0xfc, 0xc2,  //
             0x00, 0xb2, 0xd9, 0x8a, 0xfa, 0x01, 0x32, 0x82}},

           {{0xf6, 0x47, 0x68, 0x70, 0x59, 0x11, 0xaa, 0x73,  //
             0xb6, 0x6c, 0x27, 0x10, 0xc5, 0x33, 0x50, 0xd6},
            {0xa5, 0xae, 0xe6, 0x06, 0x38, 0x57, 0x59, 0x0e,  //
             0x0e, 0xa7, 0x21, 0xd4, 0x35, 0x9f, 0xc4, 0x94}},

           {{0xa1, 0xf8, 0xd4, 0x88, 0x68, 0xc3, 0x52, 0x7c,  //
             0xbe, 0x63, 0xc5, 0x23, 0xa3, 0x09, 0x27, 0x41},
            {0x96, 0x08, 0x39, 0xd5, 0xfe, 0x56, 0x03, 0xf7,  //
             0xb5, 0x69, 0x08, 0x8c, 0x34, 0x72, 0xce, 0xfb}},

           {{0x56, 0x8f, 0x61, 0xaa, 0x34, 0x3c, 0x2e, 0x1b,  //
             0xca, 0x02, 0x84, 0x6d, 0xe6, 0x6a, 0x0a, 0xa4},
            {0x26, 0x54, 0x8f, 0x77, 0x07, 0x08, 0x42, 0x68,  //
             0x3e, 0x4e, 0x9a, 0x28, 0x50, 0xcd, 0x18, 0x37}},

           {{0x6f, 0x4a, 0x03, 0xda, 0x95, 0x27, 0x39, 0xdc,  //
             0xe1, 0x6a, 0x0a, 0x1d, 0x85, 0x1f, 0x27, 0x73},
            {0xb4, 0x7b, 0x46, 0xe5, 0xf1, 0x30, 0x32, 0xe5,  //
             0xcd, 0x9a, 0x60, 0xcd, 0x67, 0xd1, 0x73, 0x3b}},
       }) {
    uint8_t text[16];
    // for (int i = 0; i < 16; ++i) text[i] = plain[i];
    aes128::encrypt(round_keys, plain.data(), text);
    for (int i = 0; i < 16; ++i) CHECK(text[i] == crypt[i]);
    aes128::decrypt(round_keys, text, text);
    for (int i = 0; i < 16; ++i) CHECK(text[i] == plain[i]);
  }
}
